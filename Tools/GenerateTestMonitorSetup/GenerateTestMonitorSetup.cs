// Copyright 2020 Ammo Goettsch
// 
// Helios is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Helios is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;
using GadrocsWorkshop.Helios.Util;
using ToolsCommon;

namespace GenerateTestMonitorSetup
{
    internal class GenerateTestMonitorSetup
    {
        private const int MAX_ROWS = 5;
        private const int MAX_COLUMNS = 12;

        private class Config
        {
            private static readonly int MAIN_LEFT = 1080;
            private static readonly int MAIN_TOP = 0;
            public readonly int main_left = MAIN_LEFT;
            public readonly int main_top = MAIN_TOP;
            public readonly int main_width = 2560;
            public readonly int main_height = 1440;
            public readonly int grid_left = MAIN_LEFT + 2560;
            public readonly int grid_top = MAIN_TOP;
            public readonly int cell_width = 200;
            public readonly int cell_height = 200;
        }

        private static void Main(string[] args)
        {
            Config config = new Config();
            List<FormattableString> lines = new List<FormattableString>
            {
                $"_  = function(p) return p; end;",
                $"name = _('test_all_viewports')",
                $"description = 'Generated by Helios {Assembly.GetEntryAssembly()?.GetName().Name} tool'",
                $"Viewports = {{",
                $"  Center = {{",
                $"    x = {config.main_left},",
                $"    y = {config.main_top},",
                $"    width = {config.main_width},",
                $"    height = {config.main_height},",
                $"    aspect = {(double) config.main_width / (double) config.main_height},",
                $"    dx = 0,",
                $"    dy = 0",
                $"  }}",
                $"}}"
            };

            // XXX generate locals in the script and calculate all other values from it, so it can be adapted to other screens

            int row = 0;
            int column = 0;

            // also update helios overlay for labels
            XmlDocument heliosProfile = null;
            string profilePath = null;
            foreach (string documentsFolder in new[] {"HeliosDev", "HeliosTesting", "Helios"})
            {
                profilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                    documentsFolder, "Profiles", "test_all_viewports.hpf");
                if (File.Exists(profilePath))
                {
                    heliosProfile = new XmlDocument();
                    heliosProfile.Load(profilePath);
                    XmlNode root = heliosProfile.DocumentElement;
                    XmlNode controlNode = root.SelectSingleNode("descendant::Control[@Name=\"Label\"]");
                    XmlNode childrenNode = controlNode.ParentNode;
                    childrenNode.RemoveAll();
                    childrenNode.AppendChild(controlNode);
                    break;
                }
            }

            // write standard viewports
            EmitViewports(lines, heliosProfile, config, ref row, ref column, StandardViewports.Known);

            // write mod-created viewports
            EmitViewports(lines, heliosProfile, config, ref row, ref column, ModViewports.Known, true);

            // main view
            lines.Add($"UIMainView = Viewports.Center");
            lines.Add($"GU_MAIN_VIEWPORT = Viewports.Center");

            WriteFile(lines);

            if (heliosProfile != null)
            {
                heliosProfile.Save(profilePath);
            }
        }

        private static void EmitViewports(List<FormattableString> lines, XmlDocument heliosProfile, Config config, ref int row,
            ref int column, IList<ViewportTemplate> known, bool viewportPrefix = false)
        {
            if (row >= MAX_ROWS)
            {
                return;
            }

            XmlNode root = null;
            XmlNode childrenNode = null;
            XmlNode controlNode = null;

            if (heliosProfile != null)
            {
                root = heliosProfile.DocumentElement;
                controlNode = root.SelectSingleNode("descendant::Control[@Name=\"Label\"]");
                childrenNode = controlNode.ParentNode;
            }

            foreach (ViewportTemplate template in known)
            {
                foreach (Viewport viewport in template.Viewports.Where(v => v.IsValid))
                {
                    lines.Add($"-- {template.DisplayName(viewport)}");
                    string viewportName = viewport.ViewportName;
                    if (viewportPrefix)
                    {
                        viewportName = $"{template.ViewportPrefix}_{viewport.ViewportName}";
                    }

                    lines.Add($"{viewportName} =");
                    lines.Add($"{{");
                    lines.Add($"  x = {config.grid_left + column * config.cell_width},");
                    lines.Add($"  y = {config.grid_top + row * config.cell_height},");
                    lines.Add($"  width = {config.cell_width},");
                    lines.Add($"  height = {config.cell_height}");
                    lines.Add($"}}");
                    lines.Add($"");

                    if (childrenNode != null)
                    {
                        if (row == 0 && column == 0)
                        {
                            // crash if control is missing
                            controlNode.SelectSingleNode("./Text").InnerText = viewportName;
                        }
                        else
                        {
                            XmlNode cloned = controlNode.CloneNode(true);
                            cloned.Attributes["Name"].Value = $"Label_{row}_{column}";
                            cloned.SelectSingleNode("./Text").InnerText = viewportName;
                            cloned.SelectSingleNode("./Location").InnerText =
                                $"{column * config.cell_width}, {row * config.cell_height}";
                            childrenNode.AppendChild(cloned);
                        }
                    }

                    column++;
                    if (column >= MAX_COLUMNS)
                    {
                        column = 0;
                        row++;
                        if (row >= MAX_ROWS)
                        {
                            return;
                        }
                    }
                }
            }
        }

        private static void WriteFile(List<FormattableString> lines)
        {
            foreach (FormattableString line in lines)
            {
                Debug.WriteLine(FormattableString.Invariant(line));
            }

            string text = string.Join(Environment.NewLine, lines.Select(FormattableString.Invariant));
            string outputPath = Path.Combine(KnownFolders.SavedGames, "DCS", "Config", "MonitorSetup",
                "test_all_viewports.lua");
            File.WriteAllText(outputPath, text);
            outputPath = Path.Combine(KnownFolders.SavedGames, "DCS.OpenBeta", "Config", "MonitorSetup",
                "test_all_viewports.lua");
            File.WriteAllText(outputPath, text);
        }
    }
}